import stripe
from app.models.payment import Payment
from app.models.user import User
from app.database import get_db
from flask import current_app

class PaymentService:
    @staticmethod
    def create_payment_intent(user_id, amount, currency="usd", description=None):
        """Create a Stripe Payment Intent"""
        try:
            stripe.api_key = current_app.config.get('STRIPE_SECRET_KEY')
            
            if not stripe.api_key:
                return None, "Stripe not configured"
            
            # Create Payment Intent
            intent = stripe.PaymentIntent.create(
                amount=int(amount * 100),  # Convert to cents
                currency=currency,
                metadata={
                    'user_id': user_id,
                    'description': description or 'HubHive Payment'
                }
            )
            
            # Save payment record
            db = get_db()
            payment = Payment(
                user_id=user_id,
                amount=amount,
                currency=currency.upper(),
                status='pending',
                payment_method='stripe',
                stripe_payment_intent_id=intent.id,
                description=description
            )
            db.add(payment)
            db.commit()
            
            return {
                'client_secret': intent.client_secret,
                'payment_id': payment.id,
                'amount': amount,
                'currency': currency
            }, "Payment intent created successfully"
            
        except Exception as e:
            return None, f"Payment error: {str(e)}"

    @staticmethod
    def confirm_payment(payment_intent_id):
        """Confirm and update payment status"""
        try:
            stripe.api_key = current_app.config.get('STRIPE_SECRET_KEY')
            
            intent = stripe.PaymentIntent.retrieve(payment_intent_id)
            db = get_db()
            
            payment = db.query(Payment).filter_by(
                stripe_payment_intent_id=payment_intent_id
            ).first()
            
            if payment and intent.status == 'succeeded':
                payment.status = 'completed'
                db.commit()
                return payment, "Payment completed successfully"
            else:
                if payment:
                    payment.status = 'failed'
                    db.commit()
                return None, "Payment failed"
                
        except Exception as e:
            return None, f"Payment confirmation error: {str(e)}"

    @staticmethod
    def get_user_payments(user_id):
        """Get payment history for a user"""
        db = get_db()
        payments = db.query(Payment).filter_by(user_id=user_id).order_by(
            Payment.created_at.desc()
        ).all()
        return payments, "Payments retrieved successfully"
